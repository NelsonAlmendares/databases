-- MySQL Script generated by MySQL Workbench
-- Sat Aug 26 19:24:09 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema library
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema library
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `library` DEFAULT CHARACTER SET utf8mb4 ;
USE `library` ;

-- -----------------------------------------------------
-- Table `library`.`typeemployee`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`typeemployee` ;

CREATE TABLE IF NOT EXISTS `library`.`typeemployee` (
  `id_TypeEmployee` INT(11) NOT NULL AUTO_INCREMENT,
  `type__employee` VARCHAR(50) NULL DEFAULT NULL,
  PRIMARY KEY (`id_TypeEmployee`))
ENGINE = InnoDB
AUTO_INCREMENT = 9
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `library`.`employee`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`employee` ;

CREATE TABLE IF NOT EXISTS `library`.`employee` (
  `id_employee` INT(11) NOT NULL AUTO_INCREMENT,
  `employee_firstName` VARCHAR(50) NOT NULL,
  `employee_lastName` VARCHAR(90) NOT NULL,
  `password_employee` VARCHAR(30) NOT NULL,
  `employee_address` VARCHAR(200) NOT NULL,
  `employee_phone` VARCHAR(12) NOT NULL,
  `employee_mail` VARCHAR(200) NOT NULL,
  `employee_photo` LONGBLOB NULL DEFAULT NULL,
  `id_TypeEmployee` INT(11) NOT NULL,
  PRIMARY KEY (`id_employee`),
  INDEX `FK_typeEmployee` (`id_TypeEmployee` ASC) VISIBLE,
  CONSTRAINT `FK_typeEmployee`
    FOREIGN KEY (`id_TypeEmployee`)
    REFERENCES `library`.`typeemployee` (`id_TypeEmployee`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `library`.`payment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`payment` ;

CREATE TABLE IF NOT EXISTS `library`.`payment` (
  `id_payment` INT(11) NOT NULL AUTO_INCREMENT,
  `type__payment` VARCHAR(40) NULL DEFAULT NULL,
  PRIMARY KEY (`id_payment`))
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `library`.`brands`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`brands` ;

CREATE TABLE IF NOT EXISTS `library`.`brands` (
  `id_brand` INT(11) NOT NULL AUTO_INCREMENT,
  `brand__name` VARCHAR(40) NULL DEFAULT NULL,
  PRIMARY KEY (`id_brand`))
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `library`.`distributor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`distributor` ;

CREATE TABLE IF NOT EXISTS `library`.`distributor` (
  `id_distributor` INT(11) NOT NULL AUTO_INCREMENT,
  `name_distributor` VARCHAR(120) NOT NULL,
  `comments` VARCHAR(400) NULL DEFAULT 'Sin comentarios registrados',
  `register_date` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`id_distributor`))
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `library`.`productstatus`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`productstatus` ;

CREATE TABLE IF NOT EXISTS `library`.`productstatus` (
  `id_productStatus` INT(11) NOT NULL AUTO_INCREMENT,
  `product__state` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`id_productStatus`))
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `library`.`products`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`products` ;

CREATE TABLE IF NOT EXISTS `library`.`products` (
  `id_product` INT(11) NOT NULL AUTO_INCREMENT,
  `product_brand` INT(11) NOT NULL,
  `product_name` VARCHAR(50) NOT NULL,
  `product_price` DOUBLE(5,2) NOT NULL,
  `product_photo` LONGBLOB NULL DEFAULT NULL,
  `date_entry` DATE NULL DEFAULT NULL,
  `product_description` LONGTEXT NULL DEFAULT 'Sin descripci√≥n',
  `id_productStatus` INT(11) NOT NULL,
  `id_productDistributor` INT(11) NOT NULL,
  `id_review` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id_product`),
  INDEX `FK_productBrand` (`product_brand` ASC) VISIBLE,
  INDEX `FK_productStatus` (`id_productStatus` ASC) VISIBLE,
  INDEX `FK_productDistributor` (`id_productDistributor` ASC) VISIBLE,
  CONSTRAINT `FK_productBrand`
    FOREIGN KEY (`product_brand`)
    REFERENCES `library`.`brands` (`id_brand`),
  CONSTRAINT `FK_productDistributor`
    FOREIGN KEY (`id_productDistributor`)
    REFERENCES `library`.`distributor` (`id_distributor`),
  CONSTRAINT `FK_productStatus`
    FOREIGN KEY (`id_productStatus`)
    REFERENCES `library`.`productstatus` (`id_productStatus`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 19
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `library`.`statusclient`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`statusclient` ;

CREATE TABLE IF NOT EXISTS `library`.`statusclient` (
  `id_StatusClient` INT(11) NOT NULL AUTO_INCREMENT,
  `status__client` VARCHAR(50) NULL DEFAULT NULL,
  PRIMARY KEY (`id_StatusClient`))
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `library`.`client`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`client` ;

CREATE TABLE IF NOT EXISTS `library`.`client` (
  `id_client` INT(11) NOT NULL AUTO_INCREMENT,
  `client_firstName` VARCHAR(100) NOT NULL,
  `client_lastName` VARCHAR(100) NOT NULL,
  `password_client` VARCHAR(30) NOT NULL,
  `client_phone` VARCHAR(12) NOT NULL,
  `client_address` VARCHAR(200) NOT NULL,
  `client_mail` VARCHAR(150) NOT NULL,
  `client_photo` LONGBLOB NULL DEFAULT NULL,
  `id_statusClient` INT(11) NOT NULL,
  `client_document` VARCHAR(16) NOT NULL,
  PRIMARY KEY (`id_client`),
  INDEX `FK_statusClients` (`id_statusClient` ASC) VISIBLE,
  CONSTRAINT `FK_statusClients`
    FOREIGN KEY (`id_statusClient`)
    REFERENCES `library`.`statusclient` (`id_StatusClient`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `library`.`sales`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`sales` ;

CREATE TABLE IF NOT EXISTS `library`.`sales` (
  `id_sales` INT(11) NOT NULL AUTO_INCREMENT,
  `date_issue` DATE NOT NULL,
  `sale_address` VARCHAR(200) NOT NULL,
  `sale_total_due` DOUBLE(5,2) NULL DEFAULT NULL,
  `type_of_payment` INT(11) NOT NULL,
  `id_product` INT(11) NOT NULL,
  `id_salePurchaser` INT(11) NOT NULL,
  `id_employee` INT(11) NOT NULL,
  PRIMARY KEY (`id_sales`),
  INDEX `FK_payment` (`type_of_payment` ASC) VISIBLE,
  INDEX `FK_products` (`id_product` ASC) VISIBLE,
  INDEX `FK_purchaser` (`id_salePurchaser` ASC) VISIBLE,
  INDEX `FK_employees` (`id_employee` ASC) VISIBLE,
  CONSTRAINT `FK_employees`
    FOREIGN KEY (`id_employee`)
    REFERENCES `library`.`employee` (`id_employee`),
  CONSTRAINT `FK_payment`
    FOREIGN KEY (`type_of_payment`)
    REFERENCES `library`.`payment` (`id_payment`),
  CONSTRAINT `FK_products`
    FOREIGN KEY (`id_product`)
    REFERENCES `library`.`products` (`id_product`),
  CONSTRAINT `FK_purchaser`
    FOREIGN KEY (`id_salePurchaser`)
    REFERENCES `library`.`client` (`id_client`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `library`.`bills`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`bills` ;

CREATE TABLE IF NOT EXISTS `library`.`bills` (
  `id_bill` INT(11) NOT NULL AUTO_INCREMENT,
  `sale__correlative` INT(11) NULL DEFAULT NULL,
  `quantity` INT(11) NOT NULL,
  `id_sales` INT(11) NOT NULL,
  `id_client` INT(11) NOT NULL,
  `date_issue` DATE NULL DEFAULT NULL,
  `comments` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id_bill`),
  INDEX `FK_bill` (`id_sales` ASC) VISIBLE,
  INDEX `FK_billClient` (`id_client` ASC) VISIBLE,
  CONSTRAINT `FK_bill`
    FOREIGN KEY (`id_sales`)
    REFERENCES `library`.`sales` (`id_sales`),
  CONSTRAINT `FK_billClient`
    FOREIGN KEY (`id_client`)
    REFERENCES `library`.`client` (`id_client`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `library`.`clasification`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`clasification` ;

CREATE TABLE IF NOT EXISTS `library`.`clasification` (
  `id_clasification` INT(11) NOT NULL AUTO_INCREMENT,
  `clasification__product` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`id_clasification`))
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `library`.`gender`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`gender` ;

CREATE TABLE IF NOT EXISTS `library`.`gender` (
  `id_gender` INT(11) NOT NULL AUTO_INCREMENT,
  `product__gender` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`id_gender`))
ENGINE = InnoDB
AUTO_INCREMENT = 7
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `library`.`productespecification`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`productespecification` ;

CREATE TABLE IF NOT EXISTS `library`.`productespecification` (
  `id_especification` INT(11) NOT NULL AUTO_INCREMENT,
  `product__quantity` INT(11) NULL DEFAULT 0,
  `product__author` VARCHAR(100) NOT NULL,
  `product_format` VARCHAR(300) NOT NULL,
  `product_themes` VARCHAR(300) NOT NULL,
  `id_productGender` INT(11) NOT NULL,
  `id_clasification` INT(11) NOT NULL,
  `id_product` INT(11) NOT NULL,
  PRIMARY KEY (`id_especification`),
  INDEX `FK_gender` (`id_productGender` ASC) VISIBLE,
  INDEX `FK_clasification` (`id_clasification` ASC) VISIBLE,
  INDEX `FK_product` (`id_product` ASC) VISIBLE,
  CONSTRAINT `FK_clasification`
    FOREIGN KEY (`id_clasification`)
    REFERENCES `library`.`clasification` (`id_clasification`),
  CONSTRAINT `FK_gender`
    FOREIGN KEY (`id_productGender`)
    REFERENCES `library`.`gender` (`id_gender`),
  CONSTRAINT `FK_product`
    FOREIGN KEY (`id_product`)
    REFERENCES `library`.`products` (`id_product`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 14
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `library`.`reviews`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`reviews` ;

CREATE TABLE IF NOT EXISTS `library`.`reviews` (
  `id_review` INT(11) NOT NULL AUTO_INCREMENT,
  `name_client` VARCHAR(200) NOT NULL,
  `product_review` LONGTEXT NOT NULL,
  `review_date` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`id_review`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `library`.`salesreturn`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`salesreturn` ;

CREATE TABLE IF NOT EXISTS `library`.`salesreturn` (
  `id_saleReturned` INT(11) NOT NULL AUTO_INCREMENT,
  `date_returned` DATE NULL DEFAULT NULL,
  `return__comment` VARCHAR(200) NOT NULL,
  `id_sale` INT(11) NOT NULL,
  PRIMARY KEY (`id_saleReturned`),
  INDEX `FK_salesReturn` (`id_sale` ASC) VISIBLE,
  CONSTRAINT `FK_salesReturn`
    FOREIGN KEY (`id_sale`)
    REFERENCES `library`.`sales` (`id_sales`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;

USE `library` ;

-- -----------------------------------------------------
-- Placeholder table for view `library`.`all_clients`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `library`.`all_clients` (`ID` INT, `Name` INT, `Phone` INT, `Address` INT, `Mail` INT, `photo` INT, `DUI` INT, `Status` INT);

-- -----------------------------------------------------
-- Placeholder table for view `library`.`all_employees`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `library`.`all_employees` (`ID` INT, `Name` INT, `Address` INT, `Phone` INT, `Mail` INT, `Picture` INT, `Assignment` INT);

-- -----------------------------------------------------
-- Placeholder table for view `library`.`allitems`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `library`.`allitems` (`id` INT, `product_name` INT, `brand__name` INT, `product_price` INT, `product_photo` INT, `date_entry` INT, `product_description` INT, `product__author` INT, `product__state` INT, `product_format` INT, `product__gender` INT, `clasification__product` INT);

-- -----------------------------------------------------
-- procedure Add_Product
-- -----------------------------------------------------

USE `library`;
DROP procedure IF EXISTS `library`.`Add_Product`;

DELIMITER $$
USE `library`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Add_Product`(
	-- First insert params
	productBrand INT, productName VARCHAR(50), product_price DOUBLE(5,2), productPhoto LONGBLOB, 
    product_description LONGTEXT, productStatus INT, productDistributor INT, productReview INT,
    -- Second Insert params
	productQuantity INT, productAuthor VARCHAR(100), productFormat VARCHAR(300), productTheme VARCHAR(300), 
    productGender INT, productClasification INT)
BEGIN
	-- Variable to get last inserted ID
	DECLARE last_id INT DEFAULT 0;
    -- Variable para evaluar la insercci√≥n de la rese√±a, en caso de ser nula lo dejamos con un valor de 0 para luego actualizarla con el ID correspondiente
    DECLARE review_id INT;
    -- Evaluamos la variable y le asignamos un valor nullo
    SET review_id = IF(productReview = -1, NULL, productReview);
    
	START TRANSACTION;
    -- First Insert
    INSERT INTO Products (product_brand, product_name, product_price, product_photo, date_entry, product_description, id_productStatus, id_productDistributor, id_review)
		VALUES (productBrand, productName, product_price, productPhoto, CURDATE(), product_description, productStatus, productDistributor, review_id);
	-- GET LAST INSERTD ID
	SET last_id := LAST_INSERT_ID();
    
    IF last_id > 0 THEN
		INSERT INTO ProductEspecification (product__quantity, product__author, product_format, product_themes, id_productGender, id_clasification, id_product)
			VALUES (productQuantity, productAuthor, productFormat, productTheme, productGender, productClasification, last_id);
		COMMIT;
	ELSE 
		ROLLBACK;	
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure BuscarPersona
-- -----------------------------------------------------

USE `library`;
DROP procedure IF EXISTS `library`.`BuscarPersona`;

DELIMITER $$
USE `library`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `BuscarPersona`(nombreBuscado VARCHAR(100))
BEGIN
	DECLARE done INT DEFAULT FALSE;
    DECLARE nombre VARCHAR(100);
    DECLARE price DOUBLE(5,2);
    DECLARE productDescription VARCHAR(100);
    
    DECLARE searchName CURSOR FOR
		SELECT product_name, CONCAT('$', product_price), product_description
        FROM Products
        WHERE product_name LIKE CONCAT("%",nombreBuscado,"%")
        GROUP BY product_name;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    OPEN searchName;
		loop_cursor: LOOP
			FETCH searchName INTO nombre, price, productDescription;
            
            IF done THEN
				LEAVE loop_cursor;
            END IF;
            
            SELECT nombre, price, productDescription;
		END LOOP;
    CLOSE searchName;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure InsertDistributor
-- -----------------------------------------------------

USE `library`;
DROP procedure IF EXISTS `library`.`InsertDistributor`;

DELIMITER $$
USE `library`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `InsertDistributor`(nameDistributor VARCHAR(100), commentsDistributor LONGTEXT)
BEGIN
	START TRANSACTION;
	INSERT INTO Distributor (name_distributor, comments, register_date) VALUES (nameDistributor, commentsDistributor, CURDATE());
    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SearchById
-- -----------------------------------------------------

USE `library`;
DROP procedure IF EXISTS `library`.`SearchById`;

DELIMITER $$
USE `library`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SearchById`(paramID INT)
BEGIN
		START TRANSACTION;
        SELECT PD.id_product AS ID, brand__name AS Editorial, product_name AS Libro, CONCAT('$', product_price) AS Precio, product_photo AS Foto, product__author AS Autor,
			product_format AS Caracteristicas , product_themes AS Temas, product_description AS Resumen, product__gender AS G√©nero, 
			product__quantity AS Disponibles, clasification__product AS Clasificaci√≥n ,product__state AS Estado
		FROM Products PD
		INNER JOIN Brands BR ON PD.product_brand = BR.id_brand
		INNER JOIN ProductStatus PS ON PD.id_productStatus = PS.id_productStatus
		INNER JOIN ProductEspecification PDE ON PD.id_product = PDE.id_product
		INNER JOIN Gender GE ON PDE.id_productGender = GE.id_gender
		INNER JOIN Clasification CL ON PDE.id_clasification = CL.id_clasification
		WHERE PD.id_product = paramID;
        COMMIT;
    END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Search_Product
-- -----------------------------------------------------

USE `library`;
DROP procedure IF EXISTS `library`.`Search_Product`;

DELIMITER $$
USE `library`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Product`(search_product VARCHAR(100))
BEGIN
	START TRANSACTION;
    SELECT DISTINCT PR.id_product AS ID,product_name AS Libro, product__author AS Autor, product_photo AS Picture,
		brand__name AS Editorial , product__gender AS G√©nero, clasification__product AS Clasificaci√≥n, CONCAT('$', product_price) AS Precio, 
        product__quantity AS Cantidad, product_themes AS Temas, product__state
	-- Unimos las tablas
	FROM Products PR
	INNER JOIN Brands BR ON PR.product_brand = BR.id_brand 
	INNER JOIN ProductEspecification PDE ON PDE.id_especification
	INNER JOIN Gender GE ON PDE.id_productGender = GE.id_gender
	INNER JOIN Clasification CL ON CL.id_clasification = PDE.id_clasification
    INNER JOIN ProductStatus PS ON PR.id_productStatus = PS.id_productStatus
    -- Evaluamos donde va a buscar
	WHERE (product_name LIKE CONCAT('%',search_product,'%') OR
		product__author LIKE CONCAT('%',search_product,'%') OR
        brand__name LIKE CONCAT('%',search_product,'%') OR
        product__gender LIKE CONCAT('%',search_product,'%') OR
        product_themes LIKE CONCAT('%',search_product,'%') OR
        clasification__product LIKE CONCAT('%',search_product,'%'))
		AND product__quantity <> 0
        AND product__state != 'Agotado';
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure delete_Product
-- -----------------------------------------------------

USE `library`;
DROP procedure IF EXISTS `library`.`delete_Product`;

DELIMITER $$
USE `library`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `delete_Product`(id_to_delete INT)
BEGIN 
	START TRANSACTION;
		-- Tomamos la varible con la que recibimos de par√°metro desde visual para eliminar la relaci√≥n de las 2 tablas
		DELETE FROM Products WHERE id_product = id_to_delete;
        DELETE FROM ProductEspecification WHERE id_product = id_to_delete;
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `library`.`all_clients`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`all_clients`;
DROP VIEW IF EXISTS `library`.`all_clients` ;
USE `library`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `library`.`all_clients` AS select `cl`.`id_client` AS `ID`,concat(`cl`.`client_firstName`,' ',`cl`.`client_lastName`) AS `Name`,`cl`.`client_phone` AS `Phone`,`cl`.`client_address` AS `Address`,`cl`.`client_mail` AS `Mail`,`cl`.`client_photo` AS `photo`,`cl`.`client_document` AS `DUI`,`sc`.`status__client` AS `Status` from (`library`.`client` `cl` join `library`.`statusclient` `sc` on(`cl`.`id_statusClient` = `sc`.`id_StatusClient`));

-- -----------------------------------------------------
-- View `library`.`all_employees`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`all_employees`;
DROP VIEW IF EXISTS `library`.`all_employees` ;
USE `library`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `library`.`all_employees` AS select `ep`.`id_employee` AS `ID`,concat(`ep`.`employee_firstName`,' ',`ep`.`employee_lastName`) AS `Name`,`ep`.`employee_address` AS `Address`,`ep`.`employee_phone` AS `Phone`,`ep`.`employee_mail` AS `Mail`,`ep`.`employee_photo` AS `Picture`,`tp`.`type__employee` AS `Assignment` from (`library`.`employee` `ep` join `library`.`typeemployee` `tp` on(`ep`.`id_TypeEmployee` = `tp`.`id_TypeEmployee`)) where `ep`.`id_employee` = 1;

-- -----------------------------------------------------
-- View `library`.`allitems`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`allitems`;
DROP VIEW IF EXISTS `library`.`allitems` ;
USE `library`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `library`.`allitems` AS select `p`.`id_product` AS `id`,`p`.`product_name` AS `product_name`,`br`.`brand__name` AS `brand__name`,concat('$',`p`.`product_price`) AS `product_price`,`p`.`product_photo` AS `product_photo`,`p`.`date_entry` AS `date_entry`,`p`.`product_description` AS `product_description`,`pde`.`product__author` AS `product__author`,`ps`.`product__state` AS `product__state`,`pde`.`product_format` AS `product_format`,`ge`.`product__gender` AS `product__gender`,`cl`.`clasification__product` AS `clasification__product` from (((((`library`.`products` `p` join `library`.`productstatus` `ps` on(`p`.`id_productStatus` = `ps`.`id_productStatus`)) join `library`.`brands` `br` on(`p`.`product_brand` = `br`.`id_brand`)) join `library`.`productespecification` `pde` on(`p`.`id_product` = `pde`.`id_product`)) join `library`.`gender` `ge` on(`pde`.`id_productGender` = `ge`.`id_gender`)) join `library`.`clasification` `cl` on(`pde`.`id_clasification` = `cl`.`id_clasification`));

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
